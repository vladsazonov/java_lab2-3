
package com.example.async;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.Response;
import com.example.soap.service.Monitor;
import com.example.soap.service.MonitorArray;
import com.example.soap.service.ObjectFactory;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "MonitorService", targetNamespace = "http://service.soap.example.com/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface MonitorService {


    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.example.soap.service.MonitorArray>
     */
    @WebMethod(operationName = "getAllMonitors")
    public Response<MonitorArray> getAllMonitorsAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllMonitors")
    public Future<?> getAllMonitorsAsync(
        @WebParam(name = "asyncHandler", partName = "asyncHandler")
        AsyncHandler<MonitorArray> asyncHandler);

    /**
     * 
     * @return
     *     returns com.example.soap.service.MonitorArray
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.soap.example.com/MonitorService/getAllMonitorsRequest", output = "http://service.soap.example.com/MonitorService/getAllMonitorsResponse")
    public MonitorArray getAllMonitors();

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<java.lang.Boolean>
     */
    @WebMethod(operationName = "addMonitor")
    public Response<Boolean> addMonitorAsync(
        @WebParam(name = "arg0", partName = "arg0")
        Monitor arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "addMonitor")
    public Future<?> addMonitorAsync(
        @WebParam(name = "arg0", partName = "arg0")
        Monitor arg0,
        @WebParam(name = "asyncHandler", partName = "asyncHandler")
        AsyncHandler<Boolean> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.soap.example.com/MonitorService/addMonitorRequest", output = "http://service.soap.example.com/MonitorService/addMonitorResponse")
    public boolean addMonitor(
        @WebParam(name = "arg0", partName = "arg0")
        Monitor arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<java.lang.Boolean>
     */
    @WebMethod(operationName = "deleteMonitor")
    public Response<Boolean> deleteMonitorAsync(
        @WebParam(name = "arg0", partName = "arg0")
        int arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "deleteMonitor")
    public Future<?> deleteMonitorAsync(
        @WebParam(name = "arg0", partName = "arg0")
        int arg0,
        @WebParam(name = "asyncHandler", partName = "asyncHandler")
        AsyncHandler<Boolean> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.soap.example.com/MonitorService/deleteMonitorRequest", output = "http://service.soap.example.com/MonitorService/deleteMonitorResponse")
    public boolean deleteMonitor(
        @WebParam(name = "arg0", partName = "arg0")
        int arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<com.example.soap.service.Monitor>
     */
    @WebMethod(operationName = "getMonitor")
    public Response<Monitor> getMonitorAsync(
        @WebParam(name = "arg0", partName = "arg0")
        int arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getMonitor")
    public Future<?> getMonitorAsync(
        @WebParam(name = "arg0", partName = "arg0")
        int arg0,
        @WebParam(name = "asyncHandler", partName = "asyncHandler")
        AsyncHandler<Monitor> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns com.example.soap.service.Monitor
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://service.soap.example.com/MonitorService/getMonitorRequest", output = "http://service.soap.example.com/MonitorService/getMonitorResponse")
    public Monitor getMonitor(
        @WebParam(name = "arg0", partName = "arg0")
        int arg0);

}
